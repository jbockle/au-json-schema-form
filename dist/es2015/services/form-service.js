var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject } from "aurelia-framework";
import { SchemaFormLogger } from "../resources/logger";
let FormService = class FormService {
    constructor(logger) {
        this.logger = logger;
        this.containerMarker = "@";
        this.overrideMarker = "$";
    }
    buildArrayForm(schema, form, formKey, model) {
        this.logger.info("buildArrayForm", { schema, form, model });
        form["$schema"] = schema.items;
        form["$arraySchema"] = schema;
        schema.items.title = schema.items.title || this.getTitle(formKey);
        let template = `<sf-${schema.items.type} model.two-way="model[$index]" form.bind="form"`;
        if (form["$schema"].type === "object") {
            template += ` schema.bind="form['$schema']"`;
        }
        template += `></sf-${schema.items.type}>`;
        this.logger.info("sf-array-item template", { template, schema, form, model });
        return template;
    }
    buildObjectForm(schema, form, model, segment = "") {
        this.logger.info("buildObjectForm", arguments);
        let template = "";
        try {
            template = this.getObjectFormTemplate(form, template, segment, schema, model);
            this.logger.info("created template", { template, schema });
            return template;
        }
        catch (ex) {
            this.logger.error("an error occurred building object view strategy", ex, schema, form, model, segment);
            throw ex;
        }
    }
    getObjectFormTemplate(form, template, segment, schema, model) {
        let wrapper;
        // tslint:disable-next-line:forin
        for (const formKey in form) {
            wrapper = this.getEmmetWrapper(formKey, wrapper);
            template = this.applyEmmetStart(wrapper, template);
            if (this.isOverride(formKey)) {
                // do nothing
            }
            else if (this.isContainer(formKey)) {
                // inner emmet container
                template = this.getContainerTemplate(segment, formKey, form, template, schema, model);
            }
            else {
                // object property
                template = this.getObjectPropertyTemplate(form, formKey, schema, model, template, segment);
            }
            template = this.applyEmmetEnd(wrapper, template);
        }
        return template;
    }
    getContainerTemplate(segment, formKey, form, template, schema, model) {
        segment += `['${formKey}']`;
        const innerForms = form[formKey];
        for (let index = 0; index < innerForms.length; index++) {
            template += this.buildObjectForm(schema, innerForms[index], model, segment + `[${index}]`);
        }
        return template;
    }
    getArrayItemDefault(schema, model) {
        switch (schema.items.type) {
            case "array":
                return model || [];
            case "number":
                return model || schema.items.const || schema.items.default || "";
            case "string":
                return model || schema.items.const || schema.items.default || "";
            case "boolean":
                return model || false;
            case "object":
                return this.getObjectModelDefaults({}, schema.items);
        }
    }
    getObjectPropertyTemplate(form, formKey, schema, model, template, segment) {
        const override = this.getOverride(form, formKey, schema);
        model = this.getObjectModelDefaults(model, schema);
        // tslint:disable-next-line:max-line-length
        template += `<sf-${override.$schema.type} model.two-way="model.${formKey}" form.bind="form${segment}.${formKey}"`;
        if (override.$schema.type === "array") {
            model[formKey] = model[formKey] || [];
            template += ` schema.bind="schema.properties.${formKey}" key="${formKey}"`;
        }
        if (override.$schema.type === "object") {
            model[formKey] = model[formKey] || {};
            template += ` schema.bind="schema.properties.${formKey}"`;
        }
        template += `></sf-${override.$schema.type}>\r\n`;
        return template;
    }
    isOverride(key) {
        this.logger.info("isOverride", arguments);
        return key.charAt(0) === this.overrideMarker;
    }
    isContainer(key) {
        this.logger.info("isContainer", arguments);
        return key.charAt(0) === this.containerMarker;
    }
    getOverride(form, formKey, schema) {
        this.logger.info("getOverride", { formKey, form, schema });
        const override = form[formKey];
        override.$schema = schema.properties[formKey];
        override.$schema.title = override.$schema.title || this.getTitle(formKey);
        override.$required = Array.isArray(schema.required) ? schema.required.indexOf(formKey) !== -1 : false;
        return override;
    }
    getTitle(key) {
        this.logger.info("getTitle", arguments);
        if (key) {
            return key
                .replace(/([A-Z])/g, " $1")
                .replace(/^./, (str) => str.toUpperCase());
        }
    }
    getObjectModelDefaults(model, schema) {
        this.logger.info("getObjectModelDefaults", arguments);
        model = model || {};
        if (schema.properties) {
            for (const property in schema.properties) {
                if (schema.properties[property].const || schema.properties[property].default) {
                    model[property] = model[property] || schema.properties[property].const || schema.properties[property].default;
                }
            }
        }
        return model;
    }
    getEmmetContainer(key) {
        this.logger.info("getEmmetContainer", arguments);
        const regex = /^@([a-z-]+)(?:(?:(?:#(\w+))?)(?:((?:\.(?:[a-z\d-]+))+)?))$/;
        const matches = key.match(regex);
        if (!matches) {
            throw new Error(`the form key "${key}" does not match "^(@element)(#id)?((.class)+)?$"`);
        }
        const element = matches[1];
        const id = !matches[2] ? "" : `id="${matches[2]}"`;
        const classes = !matches[3] ? "" : `class="${matches[3].split(".").join(" ").trim()}"`;
        return {
            start: `<${element} ${id} ${classes}>`.replace(/\s+/, " ").trim(),
            end: `</${element}>`
        };
    }
    getEmmetWrapper(key, wrapper) {
        this.logger.info("getEmmetWrapper", arguments);
        if (this.isContainer(key)) {
            wrapper = this.getEmmetContainer(key);
        }
        else {
            wrapper = {};
        }
        return wrapper;
    }
    applyEmmetEnd(wrapper, template) {
        this.logger.info("applyEmmetEnd", arguments);
        if (wrapper.end) {
            template += wrapper.end;
        }
        return template;
    }
    applyEmmetStart(wrapper, template) {
        this.logger.info("applyEmmetStart", arguments);
        if (wrapper.start) {
            template += wrapper.start;
        }
        return template;
    }
};
FormService = __decorate([
    inject(SchemaFormLogger),
    __metadata("design:paramtypes", [SchemaFormLogger])
], FormService);
export { FormService };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
