import { BootstrapValidationRenderer } from "./renderers/bootstrap-validation-renderer";
import { SchemaFormConfiguration } from "./services/schema-form-configuration";
import { PLATFORM, LogManager } from "aurelia-framework";
import { getLogger } from "aurelia-logging";
import { SchemaFormLogger } from "./resources/logger";
import { AuJsonSchemaForm } from "./form/au-json-schema-form";
import { GetBootstrapTemplates } from "./templates/bootstrap4/index";
function configure(frameworkConfig, options = {}) {
    const logger = getLogger("au-json-schema-form");
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.globalResources([
        PLATFORM.moduleName("./form/au-json-schema-form"),
        PLATFORM.moduleName("./value-converters/number-value-converter"),
        PLATFORM.moduleName("./form/number/sf-number"),
        PLATFORM.moduleName("./form/text/sf-text")
    ]);
}
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel || LogManager.logLevel.none);
    frameworkConfig.container.registerInstance(SchemaFormLogger, logger);
    logger.info("registered logger");
}
function registerConfiguration(logger, options, frameworkConfig) {
    const configuration = new SchemaFormConfiguration(options.validationRenderer || new BootstrapValidationRenderer(), options.templates || GetBootstrapTemplates(frameworkConfig), frameworkConfig);
    frameworkConfig.container.registerInstance(SchemaFormConfiguration, configuration);
    logger.info("registered configuration", configuration);
}
export { AuJsonSchemaForm, GetBootstrapTemplates, configure };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQTBCLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFtQnJFLG1CQUNFLGVBQXVDLEVBQ3ZDLFVBQW9DLEVBQUU7SUFFdEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDaEQsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDakQscUJBQXFCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV4RCxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxVQUFVLENBQUMsNEJBQTRCLENBQUM7UUFDakQsUUFBUSxDQUFDLFVBQVUsQ0FBQywyQ0FBMkMsQ0FBQztRQUVoRSxRQUFRLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDO1FBQzlDLFFBQVEsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7S0FDM0MsQ0FBQyxDQUFDO0FBRUwsQ0FBQztBQUVELHdCQUNFLE1BQXdCLEVBQ3hCLE9BQWlDLEVBQ2pDLGVBQXVDO0lBRXZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlELGVBQWUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckUsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCwrQkFDRSxNQUF3QixFQUN4QixPQUFpQyxFQUNqQyxlQUF1QztJQUV2QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHVCQUF1QixDQUMvQyxPQUFPLENBQUMsa0JBQWtCLElBQUksSUFBSSwyQkFBMkIsRUFBRSxFQUMvRCxPQUFPLENBQUMsU0FBUyxJQUFJLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxFQUMzRCxlQUFlLENBQ2hCLENBQUM7SUFDRixlQUFlLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25GLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxxQkFBcUIsRUFBNEIsU0FBUyxFQUFFLENBQUMiLCJmaWxlIjoiYXVyZWxpYS1qc29uLXNjaGVtYS1mb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9vdHN0cmFwVmFsaWRhdGlvblJlbmRlcmVyIH0gZnJvbSBcIi4vcmVuZGVyZXJzL2Jvb3RzdHJhcC12YWxpZGF0aW9uLXJlbmRlcmVyXCI7XG5pbXBvcnQgeyBTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuL3NlcnZpY2VzL3NjaGVtYS1mb3JtLWNvbmZpZ3VyYXRpb25cIjtcbmltcG9ydCB7IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24sIFBMQVRGT1JNLCBMb2dNYW5hZ2VyIH0gZnJvbSBcImF1cmVsaWEtZnJhbWV3b3JrXCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUmVuZGVyZXIgfSBmcm9tIFwiYXVyZWxpYS12YWxpZGF0aW9uXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwiYXVyZWxpYS1sb2dnaW5nXCI7XG5pbXBvcnQgeyBTY2hlbWFGb3JtTG9nZ2VyIH0gZnJvbSBcIi4vcmVzb3VyY2VzL2xvZ2dlclwiO1xuaW1wb3J0IHsgSVRlbXBsYXRlcyB9IGZyb20gXCIuL2ludGVyZmFjZXMvdGVtcGxhdGVzXCI7XG5pbXBvcnQgeyBBdUpzb25TY2hlbWFGb3JtIH0gZnJvbSBcIi4vZm9ybS9hdS1qc29uLXNjaGVtYS1mb3JtXCI7XG5pbXBvcnQgeyBHZXRCb290c3RyYXBUZW1wbGF0ZXMgfSBmcm9tIFwiLi90ZW1wbGF0ZXMvYm9vdHN0cmFwNC9pbmRleFwiO1xuXG5pbnRlcmZhY2UgSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB0aGUgcmVuZGVyZXIgdG8gZGlzcGxheSBlcnJvciwgc3VjY2VzcyBhbmQgbW9yZSBvbiBmb3JtIGVsZW1lbnRzXG4gICAqL1xuICB2YWxpZGF0aW9uUmVuZGVyZXI/OiBWYWxpZGF0aW9uUmVuZGVyZXI7XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB0aGUgbGlzdCBvZiBkZXBlbmRlbmNpZXMgdXNlZCB0byBnZW5lcmF0ZSBmb3JtIGVsZW1lbnRzXG4gICAqL1xuICB0ZW1wbGF0ZXM/OiBJVGVtcGxhdGVzO1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgc2V0cyB0aGUgbG9nIGxldmVsLCBkZWZhdWx0IGlzIG5vbmVcbiAgICovXG4gIGxvZ0xldmVsPzogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBjb25maWd1cmUoXG4gIGZyYW1ld29ya0NvbmZpZzogRnJhbWV3b3JrQ29uZmlndXJhdGlvbixcbiAgb3B0aW9uczogSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uID0ge31cbikge1xuICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoXCJhdS1qc29uLXNjaGVtYS1mb3JtXCIpO1xuICByZWdpc3RlckxvZ2dlcihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XG4gIHJlZ2lzdGVyQ29uZmlndXJhdGlvbihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XG5cbiAgZnJhbWV3b3JrQ29uZmlnLmdsb2JhbFJlc291cmNlcyhbXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZShcIi4vZm9ybS9hdS1qc29uLXNjaGVtYS1mb3JtXCIpLFxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoXCIuL3ZhbHVlLWNvbnZlcnRlcnMvbnVtYmVyLXZhbHVlLWNvbnZlcnRlclwiKSxcblxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoXCIuL2Zvcm0vbnVtYmVyL3NmLW51bWJlclwiKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKFwiLi9mb3JtL3RleHQvc2YtdGV4dFwiKVxuICBdKTtcblxufVxuXG5mdW5jdGlvbiByZWdpc3RlckxvZ2dlcihcbiAgbG9nZ2VyOiBTY2hlbWFGb3JtTG9nZ2VyLFxuICBvcHRpb25zOiBJU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24sXG4gIGZyYW1ld29ya0NvbmZpZzogRnJhbWV3b3JrQ29uZmlndXJhdGlvblxuKSB7XG4gIGxvZ2dlci5zZXRMZXZlbChvcHRpb25zLmxvZ0xldmVsIHx8IExvZ01hbmFnZXIubG9nTGV2ZWwubm9uZSk7XG4gIGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShTY2hlbWFGb3JtTG9nZ2VyLCBsb2dnZXIpO1xuICBsb2dnZXIuaW5mbyhcInJlZ2lzdGVyZWQgbG9nZ2VyXCIpO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckNvbmZpZ3VyYXRpb24oXG4gIGxvZ2dlcjogU2NoZW1hRm9ybUxvZ2dlcixcbiAgb3B0aW9uczogSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uLFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb25cbikge1xuICBjb25zdCBjb25maWd1cmF0aW9uID0gbmV3IFNjaGVtYUZvcm1Db25maWd1cmF0aW9uKFxuICAgIG9wdGlvbnMudmFsaWRhdGlvblJlbmRlcmVyIHx8IG5ldyBCb290c3RyYXBWYWxpZGF0aW9uUmVuZGVyZXIoKSxcbiAgICBvcHRpb25zLnRlbXBsYXRlcyB8fCBHZXRCb290c3RyYXBUZW1wbGF0ZXMoZnJhbWV3b3JrQ29uZmlnKSxcbiAgICBmcmFtZXdvcmtDb25maWdcbiAgKTtcbiAgZnJhbWV3b3JrQ29uZmlnLmNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKFNjaGVtYUZvcm1Db25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uKTtcbiAgbG9nZ2VyLmluZm8oXCJyZWdpc3RlcmVkIGNvbmZpZ3VyYXRpb25cIiwgY29uZmlndXJhdGlvbik7XG59XG5cbmV4cG9ydCB7IEF1SnNvblNjaGVtYUZvcm0sIEdldEJvb3RzdHJhcFRlbXBsYXRlcywgSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uLCBjb25maWd1cmUgfTtcbiJdLCJzb3VyY2VSb290Ijoic3JjIn0=
