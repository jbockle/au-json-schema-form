import { BootstrapValidationRenderer } from "./renderers/bootstrap-validation-renderer";
import { SchemaFormConfiguration } from "./services/schema-form-configuration";
import { PLATFORM, LogManager } from "aurelia-framework";
import { getLogger } from "aurelia-logging";
import { SchemaFormLogger } from "./resources/logger";
import { GetBootstrapTemplates } from "./templates/bootstrap4/index";
import { AuJsonSchemaForm } from "./form/au-json-schema-form";
import { RulesFactory } from "./rules/rules-factory";
class PluginOptions {
    constructor() {
        /**
         * @property modifies DOM to display error/success states
         * @default BootstrapValidationRenderer "targets Bootstrap v4"
         */
        this.validationRenderer = new BootstrapValidationRenderer();
        /**
         * @property global validation message overrides, choose which messages you want to override (default)
         * @default empty "use validator's default message"
         */
        this.validationMessages = {};
        /**
         * @property sets the log level (available values from LogManager.logLevel)
         * @default none "only initialization is logged"
         */
        this.logLevel = LogManager.logLevel.none;
        this.templates = GetBootstrapTemplates();
    }
}
function configure(frameworkConfig, callback) {
    const logger = getLogger("aurelia-json-schema-form");
    logger.info("initializing aurelia-json-schema-form");
    // create defaults/apply user defined configuration
    const options = new PluginOptions();
    if (callback instanceof Function) {
        callback(options);
    }
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.container.get(RulesFactory).register();
    frameworkConfig.globalResources([
        PLATFORM.moduleName("./form/au-json-schema-form"),
        PLATFORM.moduleName("./value-converters/number-value-converter"),
        PLATFORM.moduleName("./form/array/sf-array-binding-behavior"),
        PLATFORM.moduleName("./form/array/sf-array"),
        PLATFORM.moduleName("./form/array/sf-array-item"),
        PLATFORM.moduleName("./form/object/sf-object"),
        PLATFORM.moduleName("./form/number/sf-number"),
        PLATFORM.moduleName("./form/text/sf-string"),
        PLATFORM.moduleName("./form/boolean/sf-boolean"),
        PLATFORM.moduleName("./templates/bootstrap4/bootstrap-tooltip")
    ]);
}
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel);
    frameworkConfig.container.registerInstance(SchemaFormLogger, logger);
    logger.info("registered logger");
}
function registerConfiguration(logger, options, frameworkConfig) {
    const configuration = new SchemaFormConfiguration(options.validationRenderer, options.templates, options.validationMessages);
    frameworkConfig.container.registerInstance(SchemaFormConfiguration, configuration);
    logger.info("registered configuration", configuration);
}
export { configure, PluginOptions, AuJsonSchemaForm };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
