import { BootstrapValidationRenderer } from "./renderers/bootstrap-validation-renderer";
import { SchemaFormConfiguration } from "./services/schema-form-configuration";
import { PLATFORM, LogManager } from "aurelia-framework";
import { getLogger } from "aurelia-logging";
import { SchemaFormLogger } from "./resources/logger";
import { AuJsonSchemaForm } from "./form/au-json-schema-form";
import { GetBootstrapTemplates } from "./templates/bootstrap4/index";
function configure(frameworkConfig, options = {}) {
    const logger = getLogger("au-json-schema-form");
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.globalResources([
        PLATFORM.moduleName("./form/au-json-schema-form"),
        PLATFORM.moduleName("./value-converters/number-value-converter"),
        PLATFORM.moduleName("./form/number/sf-number"),
        PLATFORM.moduleName("./form/text/sf-text")
    ]);
}
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel || LogManager.logLevel.none);
    frameworkConfig.container.registerInstance(SchemaFormLogger, logger);
    logger.info("registered logger");
}
function registerConfiguration(logger, options, frameworkConfig) {
    const configuration = new SchemaFormConfiguration(options.validationRenderer || new BootstrapValidationRenderer(), options.templates || GetBootstrapTemplates(frameworkConfig), options.validationMessages || {});
    frameworkConfig.container.registerInstance(SchemaFormConfiguration, configuration);
    logger.info("registered configuration", configuration);
}
export { AuJsonSchemaForm, GetBootstrapTemplates, configure };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQTBCLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUF5QnJFLG1CQUNFLGVBQXVDLEVBQ3ZDLFVBQW9DLEVBQUU7SUFFdEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDaEQsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDakQscUJBQXFCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV4RCxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxVQUFVLENBQUMsNEJBQTRCLENBQUM7UUFDakQsUUFBUSxDQUFDLFVBQVUsQ0FBQywyQ0FBMkMsQ0FBQztRQUVoRSxRQUFRLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDO1FBQzlDLFFBQVEsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUM7S0FDM0MsQ0FBQyxDQUFDO0FBRUwsQ0FBQztBQUVELHdCQUNFLE1BQXdCLEVBQ3hCLE9BQWlDLEVBQ2pDLGVBQXVDO0lBRXZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlELGVBQWUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckUsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCwrQkFDRSxNQUF3QixFQUN4QixPQUFpQyxFQUNqQyxlQUF1QztJQUV2QyxNQUFNLGFBQWEsR0FBRyxJQUFJLHVCQUF1QixDQUMvQyxPQUFPLENBQUMsa0JBQWtCLElBQUksSUFBSSwyQkFBMkIsRUFBRSxFQUMvRCxPQUFPLENBQUMsU0FBUyxJQUFJLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxFQUMzRCxPQUFPLENBQUMsa0JBQWtCLElBQUksRUFBRSxDQUNqQyxDQUFDO0lBQ0YsZUFBZSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBdUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRixNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQTRCLFNBQVMsRUFBRSxDQUFDIiwiZmlsZSI6ImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb3RzdHJhcFZhbGlkYXRpb25SZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlcmVycy9ib290c3RyYXAtdmFsaWRhdGlvbi1yZW5kZXJlclwiO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi9zZXJ2aWNlcy9zY2hlbWEtZm9ybS1jb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBGcmFtZXdvcmtDb25maWd1cmF0aW9uLCBQTEFURk9STSwgTG9nTWFuYWdlciB9IGZyb20gXCJhdXJlbGlhLWZyYW1ld29ya1wiO1xuaW1wb3J0IHsgVmFsaWRhdGlvblJlbmRlcmVyIH0gZnJvbSBcImF1cmVsaWEtdmFsaWRhdGlvblwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImF1cmVsaWEtbG9nZ2luZ1wiO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUxvZ2dlciB9IGZyb20gXCIuL3Jlc291cmNlcy9sb2dnZXJcIjtcbmltcG9ydCB7IElUZW1wbGF0ZXMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHsgQXVKc29uU2NoZW1hRm9ybSB9IGZyb20gXCIuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybVwiO1xuaW1wb3J0IHsgR2V0Qm9vdHN0cmFwVGVtcGxhdGVzIH0gZnJvbSBcIi4vdGVtcGxhdGVzL2Jvb3RzdHJhcDQvaW5kZXhcIjtcbmltcG9ydCB7IElWYWxpZGF0aW9uTWVzc2FnZXMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3ZhbGlkYXRpb24tbWVzc2FnZXNcIjtcblxuaW50ZXJmYWNlIElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkgdGhlIHJlbmRlcmVyIHRvIGRpc3BsYXkgZXJyb3IsIHN1Y2Nlc3MgYW5kIG1vcmUgb24gZm9ybSBlbGVtZW50c1xuICAgKi9cbiAgdmFsaWRhdGlvblJlbmRlcmVyPzogVmFsaWRhdGlvblJlbmRlcmVyO1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgdGhlIGxpc3Qgb2YgZGVwZW5kZW5jaWVzIHVzZWQgdG8gZ2VuZXJhdGUgZm9ybSBlbGVtZW50c1xuICAgKi9cbiAgdGVtcGxhdGVzPzogSVRlbXBsYXRlcztcblxuICAvKipcbiAgICogQHByb3BlcnR5IGxpc3Qgb2Ygb3ZlcnJpZGVzIGZvciB2YWxpZGF0aW9uIG1lc3NhZ2VzXG4gICAqL1xuICB2YWxpZGF0aW9uTWVzc2FnZXM/OiBJVmFsaWRhdGlvbk1lc3NhZ2VzO1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgc2V0cyB0aGUgbG9nIGxldmVsLCBkZWZhdWx0IGlzIG5vbmVcbiAgICovXG4gIGxvZ0xldmVsPzogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBjb25maWd1cmUoXG4gIGZyYW1ld29ya0NvbmZpZzogRnJhbWV3b3JrQ29uZmlndXJhdGlvbixcbiAgb3B0aW9uczogSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uID0ge31cbikge1xuICBjb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoXCJhdS1qc29uLXNjaGVtYS1mb3JtXCIpO1xuICByZWdpc3RlckxvZ2dlcihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XG4gIHJlZ2lzdGVyQ29uZmlndXJhdGlvbihsb2dnZXIsIG9wdGlvbnMsIGZyYW1ld29ya0NvbmZpZyk7XG5cbiAgZnJhbWV3b3JrQ29uZmlnLmdsb2JhbFJlc291cmNlcyhbXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZShcIi4vZm9ybS9hdS1qc29uLXNjaGVtYS1mb3JtXCIpLFxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoXCIuL3ZhbHVlLWNvbnZlcnRlcnMvbnVtYmVyLXZhbHVlLWNvbnZlcnRlclwiKSxcblxuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoXCIuL2Zvcm0vbnVtYmVyL3NmLW51bWJlclwiKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKFwiLi9mb3JtL3RleHQvc2YtdGV4dFwiKVxuICBdKTtcblxufVxuXG5mdW5jdGlvbiByZWdpc3RlckxvZ2dlcihcbiAgbG9nZ2VyOiBTY2hlbWFGb3JtTG9nZ2VyLFxuICBvcHRpb25zOiBJU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24sXG4gIGZyYW1ld29ya0NvbmZpZzogRnJhbWV3b3JrQ29uZmlndXJhdGlvblxuKSB7XG4gIGxvZ2dlci5zZXRMZXZlbChvcHRpb25zLmxvZ0xldmVsIHx8IExvZ01hbmFnZXIubG9nTGV2ZWwubm9uZSk7XG4gIGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShTY2hlbWFGb3JtTG9nZ2VyLCBsb2dnZXIpO1xuICBsb2dnZXIuaW5mbyhcInJlZ2lzdGVyZWQgbG9nZ2VyXCIpO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckNvbmZpZ3VyYXRpb24oXG4gIGxvZ2dlcjogU2NoZW1hRm9ybUxvZ2dlcixcbiAgb3B0aW9uczogSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uLFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb25cbikge1xuICBjb25zdCBjb25maWd1cmF0aW9uID0gbmV3IFNjaGVtYUZvcm1Db25maWd1cmF0aW9uKFxuICAgIG9wdGlvbnMudmFsaWRhdGlvblJlbmRlcmVyIHx8IG5ldyBCb290c3RyYXBWYWxpZGF0aW9uUmVuZGVyZXIoKSxcbiAgICBvcHRpb25zLnRlbXBsYXRlcyB8fCBHZXRCb290c3RyYXBUZW1wbGF0ZXMoZnJhbWV3b3JrQ29uZmlnKSxcbiAgICBvcHRpb25zLnZhbGlkYXRpb25NZXNzYWdlcyB8fCB7fVxuICApO1xuICBmcmFtZXdvcmtDb25maWcuY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24sIGNvbmZpZ3VyYXRpb24pO1xuICBsb2dnZXIuaW5mbyhcInJlZ2lzdGVyZWQgY29uZmlndXJhdGlvblwiLCBjb25maWd1cmF0aW9uKTtcbn1cblxuZXhwb3J0IHsgQXVKc29uU2NoZW1hRm9ybSwgR2V0Qm9vdHN0cmFwVGVtcGxhdGVzLCBJU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24sIGNvbmZpZ3VyZSB9O1xuIl0sInNvdXJjZVJvb3QiOiJzcmMifQ==
