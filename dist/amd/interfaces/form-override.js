define(["require", "exports", "aurelia-logging"], function (require, exports, aurelia_logging_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var overrideMarker = "$";
    function isOverride(key) {
        var val = key.charAt(0) === overrideMarker;
        aurelia_logging_1.getLogger("aurelia-json-schema-form")
            .info("isOverride", { key: key, val: val });
        return val;
    }
    exports.isOverride = isOverride;
    function setFormOverrides(form, parentSchema, formKey, schema) {
        aurelia_logging_1.getLogger("aurelia-json-schema-form")
            .info("setFormOverrides", { form: form, parentSchema: parentSchema, formKey: formKey, schema: schema });
        schema.title = schema.title || (!!formKey ? fromCamelCase(formKey) : undefined);
        form.$schema = schema;
        if (parentSchema && parentSchema.type === "object") {
            form.$required = form.$required || (parentSchema.required
                ? parentSchema.required.indexOf(formKey) > -1 : false);
        }
    }
    exports.setFormOverrides = setFormOverrides;
    function fromCamelCase(val) {
        return val
            .replace(/([A-Z])/g, " $1")
            .replace(/^./, function (str) { return str.toUpperCase(); });
    }
    var templateModuleMarker = "_element";
    function isTemplateModule(key) {
        return key === templateModuleMarker;
    }
    exports.isTemplateModule = isTemplateModule;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVyZmFjZXMvZm9ybS1vdmVycmlkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUEyQkEsSUFBTSxjQUFjLEdBQVcsR0FBRyxDQUFDO0lBQ25DLG9CQUEyQixHQUFXO1FBQ3BDLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssY0FBYyxDQUFDO1FBRTdDLDJCQUFTLENBQUMsMEJBQTBCLENBQUM7YUFDbEMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLEdBQUcsS0FBQSxFQUFFLEdBQUcsS0FBQSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFORCxnQ0FNQztJQUVELDBCQUNFLElBQW1CLEVBQUUsWUFBbUMsRUFBRSxPQUFlLEVBQUUsTUFBNkI7UUFFeEcsMkJBQVMsQ0FBQywwQkFBMEIsQ0FBQzthQUNsQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxZQUFZLGNBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUTtnQkFDdkQsQ0FBQyxDQUFFLFlBQTRDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0Y7SUFDSCxDQUFDO0lBWkQsNENBWUM7SUFFRCx1QkFBdUIsR0FBVztRQUNoQyxPQUFPLEdBQUc7YUFDUCxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQzthQUMxQixPQUFPLENBQUMsSUFBSSxFQUFFLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQW1CRCxJQUFNLG9CQUFvQixHQUFXLFVBQVUsQ0FBQztJQUVoRCwwQkFBaUMsR0FBVztRQUMxQyxPQUFPLEdBQUcsS0FBSyxvQkFBb0IsQ0FBQztJQUN0QyxDQUFDO0lBRkQsNENBRUMiLCJmaWxlIjoiaW50ZXJmYWNlcy9mb3JtLW92ZXJyaWRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSUpzb25TY2hlbWFEZWZpbml0aW9uLFxuICBJSnNvblNjaGVtYU9iamVjdERlZmluaXRpb25cbn0gZnJvbSBcIi4vanNvbi1zY2hlbWEtZGVmaW5pdGlvblwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImF1cmVsaWEtbG9nZ2luZ1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtT3ZlcnJpZGUge1xuICBba2V5OiBzdHJpbmddOiBJRm9ybU92ZXJyaWRlW10gfCBJRm9ybU92ZXJyaWRlIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHN0cmluZyB8IElKc29uU2NoZW1hRGVmaW5pdGlvbiB8IElUZW1wbGF0ZUVsZW1lbnQ7XG4gIF9lbGVtZW50PzogSVRlbXBsYXRlRWxlbWVudDtcbiAgJG5vVGl0bGU/OiBib29sZWFuO1xuICAkYXJyYXlJdGVtPzogSUZvcm1PdmVycmlkZTtcbiAgJG5vRW1wdHlBcnJheUluaXRpYWxpemF0aW9uPzogYm9vbGVhbjtcbiAgJG5vdFJlbW92YWJsZT86IGJvb2xlYW47XG4gICRhcnJheUFzVGFicz86IGJvb2xlYW47XG4gICR0YWJUaXRsZT86IHN0cmluZztcbiAgJHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAkaHRtbENsYXNzPzogc3RyaW5nO1xuICAkYWx0VGVtcGxhdGU/OiBzdHJpbmc7XG4gICRtaW5EYXRlPzogc3RyaW5nOyAvLyB5eXl5LU1NLWRkXG4gICRtYXhEYXRlPzogc3RyaW5nOyAvLyB5eXl5LU1NLWRkXG4gICRzY2hlbWE/OiBJSnNvblNjaGVtYURlZmluaXRpb247XG4gICRyZXF1aXJlZD86IGJvb2xlYW47XG4gICRub1NlcGFyYXRvcj86IGJvb2xlYW47XG4gICRzdGVwPzogbnVtYmVyOyAvLyByYW5nZSBzbGlkZXIgc3RlcHNcbiAgJHBhcmVudEZvcm0/OiBJRm9ybU92ZXJyaWRlO1xufVxuXG5jb25zdCBvdmVycmlkZU1hcmtlcjogc3RyaW5nID0gXCIkXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNPdmVycmlkZShrZXk6IHN0cmluZykge1xuICBjb25zdCB2YWwgPSBrZXkuY2hhckF0KDApID09PSBvdmVycmlkZU1hcmtlcjtcblxuICBnZXRMb2dnZXIoXCJhdXJlbGlhLWpzb24tc2NoZW1hLWZvcm1cIilcbiAgICAuaW5mbyhcImlzT3ZlcnJpZGVcIiwgeyBrZXksIHZhbCB9KTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEZvcm1PdmVycmlkZXMoXG4gIGZvcm06IElGb3JtT3ZlcnJpZGUsIHBhcmVudFNjaGVtYTogSUpzb25TY2hlbWFEZWZpbml0aW9uLCBmb3JtS2V5OiBzdHJpbmcsIHNjaGVtYTogSUpzb25TY2hlbWFEZWZpbml0aW9uXG4pIHtcbiAgZ2V0TG9nZ2VyKFwiYXVyZWxpYS1qc29uLXNjaGVtYS1mb3JtXCIpXG4gICAgLmluZm8oXCJzZXRGb3JtT3ZlcnJpZGVzXCIsIHsgZm9ybSwgcGFyZW50U2NoZW1hLCBmb3JtS2V5LCBzY2hlbWEgfSk7XG4gIHNjaGVtYS50aXRsZSA9IHNjaGVtYS50aXRsZSB8fCAoISFmb3JtS2V5ID8gZnJvbUNhbWVsQ2FzZShmb3JtS2V5KSA6IHVuZGVmaW5lZCk7XG4gIGZvcm0uJHNjaGVtYSA9IHNjaGVtYTtcblxuICBpZiAocGFyZW50U2NoZW1hICYmIHBhcmVudFNjaGVtYS50eXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgZm9ybS4kcmVxdWlyZWQgPSBmb3JtLiRyZXF1aXJlZCB8fCAocGFyZW50U2NoZW1hLnJlcXVpcmVkXG4gICAgICA/IChwYXJlbnRTY2hlbWEgYXMgSUpzb25TY2hlbWFPYmplY3REZWZpbml0aW9uKS5yZXF1aXJlZC5pbmRleE9mKGZvcm1LZXkpID4gLTEgOiBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZnJvbUNhbWVsQ2FzZSh2YWw6IHN0cmluZykge1xuICByZXR1cm4gdmFsXG4gICAgLnJlcGxhY2UoLyhbQS1aXSkvZywgXCIgJDFcIilcbiAgICAucmVwbGFjZSgvXi4vLCAoc3RyKSA9PiBzdHIudG9VcHBlckNhc2UoKSk7XG59XG5cbi8qKiBVc2VkIHRvIGRlY2xhcmUgYSBjb21wbGV0ZWx5IHNlcGFyYXRlIG1vZHVsZSB0aGF0IGRvZXNcbiAqIG5vdCBwZXJmb3JtIHN0YW5kYXJkIHZhbGlkYXRpb24sIGltcGxlbWVudCB2aWV3L3ZpZXctbW9kZWwgaG93ZXZlciB5b3Ugd2FudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVGVtcGxhdGVFbGVtZW50IHtcblxuICAvKiogQHByb3BlcnR5IHRoZSBlbGVtZW50IHRvIGFwcGVuZCB0byB0ZW1wbGF0ZSwgbWFrZSBzdXJlIHlvdSBoYXZlIGFkZGVkIGl0J3MgbW9kdWxlTmFtZSB0byBnbG9iYWxSZXNvdXJjZXMgKi9cbiAgZWxlbWVudE5hbWU6IHN0cmluZztcblxuICAvKiogdGhlIHNjaGVtYSdzIGtleSB0byBwYXJzZSwgYmluZHMgZm9ybSAodG8tdmlldykgYW5kIG1vZGVsKHR3by13YXkpIHRvIHlvdXIgbW9kdWxlXG4gICAqIEBwcm9wZXJ0eSBJZiBzY2hlbWFLZXkgaXMgc3BlY2lmaWVkLCB5b3VyIG1vZHVsZSBtdXN0IGhhdmU6XG4gICAqICAgYmluZGFibGUgc2NoZW1hOiBJSnNvblNjaGVtYURlZmluaXRpb247XG4gICAqICAgYmluZGFibGUgbW9kZWw6IGFueSBvciBtb2RlbCB0eXBlO1xuICAgKiAgIElmIHNjaGVtYUtleSBpcyBvbW1pdHRlZCwgbm8gYmluZGluZ3MgYXJlIG1hZGVcbiAgICovXG4gIHNjaGVtYUtleT86IHN0cmluZztcbn1cblxuY29uc3QgdGVtcGxhdGVNb2R1bGVNYXJrZXI6IHN0cmluZyA9IFwiX2VsZW1lbnRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVtcGxhdGVNb2R1bGUoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGtleSA9PT0gdGVtcGxhdGVNb2R1bGVNYXJrZXI7XG59XG4iXSwic291cmNlUm9vdCI6InNyYyJ9
