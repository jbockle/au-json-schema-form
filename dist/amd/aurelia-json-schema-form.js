define(["require", "exports", "./renderers/bootstrap-validation-renderer", "./services/schema-form-configuration", "aurelia-framework", "aurelia-logging", "./resources/logger", "./form/au-json-schema-form", "./templates/bootstrap4/index"], function (require, exports, bootstrap_validation_renderer_1, schema_form_configuration_1, aurelia_framework_1, aurelia_logging_1, logger_1, au_json_schema_form_1, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuJsonSchemaForm = au_json_schema_form_1.AuJsonSchemaForm;
    exports.GetBootstrapTemplates = index_1.GetBootstrapTemplates;
    function configure(frameworkConfig, options) {
        if (options === void 0) { options = {}; }
        var logger = aurelia_logging_1.getLogger("au-json-schema-form");
        registerLogger(logger, options, frameworkConfig);
        registerConfiguration(logger, options, frameworkConfig);
        frameworkConfig.globalResources([
            aurelia_framework_1.PLATFORM.moduleName("./form/au-json-schema-form"),
            aurelia_framework_1.PLATFORM.moduleName("./value-converters/number-value-converter"),
            aurelia_framework_1.PLATFORM.moduleName("./form/number/sf-number"),
            aurelia_framework_1.PLATFORM.moduleName("./form/text/sf-text")
        ]);
    }
    exports.configure = configure;
    function registerLogger(logger, options, frameworkConfig) {
        logger.setLevel(options.logLevel || aurelia_framework_1.LogManager.logLevel.none);
        frameworkConfig.container.registerInstance(logger_1.SchemaFormLogger, logger);
        logger.info("registered logger");
    }
    function registerConfiguration(logger, options, frameworkConfig) {
        var configuration = new schema_form_configuration_1.SchemaFormConfiguration(options.validationRenderer || new bootstrap_validation_renderer_1.BootstrapValidationRenderer(), options.templates || index_1.GetBootstrapTemplates(frameworkConfig), options.validationMessages || {});
        frameworkConfig.container.registerInstance(schema_form_configuration_1.SchemaFormConfiguration, configuration);
        logger.info("registered configuration", configuration);
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUEyRVMsMkJBcEVBLHNDQUFnQixDQW9FQTtJQUFFLGdDQW5FbEIsNkJBQXFCLENBbUVrQjtJQTFDaEQsbUJBQ0UsZUFBdUMsRUFDdkMsT0FBc0M7UUFBdEMsd0JBQUEsRUFBQSxZQUFzQztRQUV0QyxJQUFNLE1BQU0sR0FBRywyQkFBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDaEQsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDakQscUJBQXFCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUV4RCxlQUFlLENBQUMsZUFBZSxDQUFDO1lBQzlCLDRCQUFRLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDO1lBQ2pELDRCQUFRLENBQUMsVUFBVSxDQUFDLDJDQUEyQyxDQUFDO1lBRWhFLDRCQUFRLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDO1lBQzlDLDRCQUFRLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDO1NBQzNDLENBQUMsQ0FBQztJQUVMLENBQUM7SUEwQjJFLDhCQUFTO0lBeEJyRix3QkFDRSxNQUF3QixFQUN4QixPQUFpQyxFQUNqQyxlQUF1QztRQUV2QyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksOEJBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELCtCQUNFLE1BQXdCLEVBQ3hCLE9BQWlDLEVBQ2pDLGVBQXVDO1FBRXZDLElBQU0sYUFBYSxHQUFHLElBQUksbURBQXVCLENBQy9DLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLDJEQUEyQixFQUFFLEVBQy9ELE9BQU8sQ0FBQyxTQUFTLElBQUksNkJBQXFCLENBQUMsZUFBZSxDQUFDLEVBQzNELE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQ2pDLENBQUM7UUFDRixlQUFlLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLG1EQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQyIsImZpbGUiOiJhdXJlbGlhLWpzb24tc2NoZW1hLWZvcm0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb290c3RyYXBWYWxpZGF0aW9uUmVuZGVyZXIgfSBmcm9tIFwiLi9yZW5kZXJlcnMvYm9vdHN0cmFwLXZhbGlkYXRpb24tcmVuZGVyZXJcIjtcbmltcG9ydCB7IFNjaGVtYUZvcm1Db25maWd1cmF0aW9uIH0gZnJvbSBcIi4vc2VydmljZXMvc2NoZW1hLWZvcm0tY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHsgRnJhbWV3b3JrQ29uZmlndXJhdGlvbiwgUExBVEZPUk0sIExvZ01hbmFnZXIgfSBmcm9tIFwiYXVyZWxpYS1mcmFtZXdvcmtcIjtcbmltcG9ydCB7IFZhbGlkYXRpb25SZW5kZXJlciB9IGZyb20gXCJhdXJlbGlhLXZhbGlkYXRpb25cIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCJhdXJlbGlhLWxvZ2dpbmdcIjtcbmltcG9ydCB7IFNjaGVtYUZvcm1Mb2dnZXIgfSBmcm9tIFwiLi9yZXNvdXJjZXMvbG9nZ2VyXCI7XG5pbXBvcnQgeyBJVGVtcGxhdGVzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy90ZW1wbGF0ZXNcIjtcbmltcG9ydCB7IEF1SnNvblNjaGVtYUZvcm0gfSBmcm9tIFwiLi9mb3JtL2F1LWpzb24tc2NoZW1hLWZvcm1cIjtcbmltcG9ydCB7IEdldEJvb3RzdHJhcFRlbXBsYXRlcyB9IGZyb20gXCIuL3RlbXBsYXRlcy9ib290c3RyYXA0L2luZGV4XCI7XG5pbXBvcnQgeyBJVmFsaWRhdGlvbk1lc3NhZ2VzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy92YWxpZGF0aW9uLW1lc3NhZ2VzXCI7XG5cbmludGVyZmFjZSBJU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogQHByb3BlcnR5IHRoZSByZW5kZXJlciB0byBkaXNwbGF5IGVycm9yLCBzdWNjZXNzIGFuZCBtb3JlIG9uIGZvcm0gZWxlbWVudHNcbiAgICovXG4gIHZhbGlkYXRpb25SZW5kZXJlcj86IFZhbGlkYXRpb25SZW5kZXJlcjtcblxuICAvKipcbiAgICogQHByb3BlcnR5IHRoZSBsaXN0IG9mIGRlcGVuZGVuY2llcyB1c2VkIHRvIGdlbmVyYXRlIGZvcm0gZWxlbWVudHNcbiAgICovXG4gIHRlbXBsYXRlcz86IElUZW1wbGF0ZXM7XG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBsaXN0IG9mIG92ZXJyaWRlcyBmb3IgdmFsaWRhdGlvbiBtZXNzYWdlc1xuICAgKi9cbiAgdmFsaWRhdGlvbk1lc3NhZ2VzPzogSVZhbGlkYXRpb25NZXNzYWdlcztcblxuICAvKipcbiAgICogQHByb3BlcnR5IHNldHMgdGhlIGxvZyBsZXZlbCwgZGVmYXVsdCBpcyBub25lXG4gICAqL1xuICBsb2dMZXZlbD86IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gY29uZmlndXJlKFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24sXG4gIG9wdGlvbnM6IElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiA9IHt9XG4pIHtcbiAgY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKFwiYXUtanNvbi1zY2hlbWEtZm9ybVwiKTtcbiAgcmVnaXN0ZXJMb2dnZXIobG9nZ2VyLCBvcHRpb25zLCBmcmFtZXdvcmtDb25maWcpO1xuICByZWdpc3RlckNvbmZpZ3VyYXRpb24obG9nZ2VyLCBvcHRpb25zLCBmcmFtZXdvcmtDb25maWcpO1xuXG4gIGZyYW1ld29ya0NvbmZpZy5nbG9iYWxSZXNvdXJjZXMoW1xuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoXCIuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybVwiKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKFwiLi92YWx1ZS1jb252ZXJ0ZXJzL251bWJlci12YWx1ZS1jb252ZXJ0ZXJcIiksXG5cbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKFwiLi9mb3JtL251bWJlci9zZi1udW1iZXJcIiksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZShcIi4vZm9ybS90ZXh0L3NmLXRleHRcIilcbiAgXSk7XG5cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJMb2dnZXIoXG4gIGxvZ2dlcjogU2NoZW1hRm9ybUxvZ2dlcixcbiAgb3B0aW9uczogSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uLFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb25cbikge1xuICBsb2dnZXIuc2V0TGV2ZWwob3B0aW9ucy5sb2dMZXZlbCB8fCBMb2dNYW5hZ2VyLmxvZ0xldmVsLm5vbmUpO1xuICBmcmFtZXdvcmtDb25maWcuY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoU2NoZW1hRm9ybUxvZ2dlciwgbG9nZ2VyKTtcbiAgbG9nZ2VyLmluZm8oXCJyZWdpc3RlcmVkIGxvZ2dlclwiKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJDb25maWd1cmF0aW9uKFxuICBsb2dnZXI6IFNjaGVtYUZvcm1Mb2dnZXIsXG4gIG9wdGlvbnM6IElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbixcbiAgZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uXG4pIHtcbiAgY29uc3QgY29uZmlndXJhdGlvbiA9IG5ldyBTY2hlbWFGb3JtQ29uZmlndXJhdGlvbihcbiAgICBvcHRpb25zLnZhbGlkYXRpb25SZW5kZXJlciB8fCBuZXcgQm9vdHN0cmFwVmFsaWRhdGlvblJlbmRlcmVyKCksXG4gICAgb3B0aW9ucy50ZW1wbGF0ZXMgfHwgR2V0Qm9vdHN0cmFwVGVtcGxhdGVzKGZyYW1ld29ya0NvbmZpZyksXG4gICAgb3B0aW9ucy52YWxpZGF0aW9uTWVzc2FnZXMgfHwge31cbiAgKTtcbiAgZnJhbWV3b3JrQ29uZmlnLmNvbnRhaW5lci5yZWdpc3Rlckluc3RhbmNlKFNjaGVtYUZvcm1Db25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uKTtcbiAgbG9nZ2VyLmluZm8oXCJyZWdpc3RlcmVkIGNvbmZpZ3VyYXRpb25cIiwgY29uZmlndXJhdGlvbik7XG59XG5cbmV4cG9ydCB7IEF1SnNvblNjaGVtYUZvcm0sIEdldEJvb3RzdHJhcFRlbXBsYXRlcywgSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uLCBjb25maWd1cmUgfTtcbiJdLCJzb3VyY2VSb290Ijoic3JjIn0=
