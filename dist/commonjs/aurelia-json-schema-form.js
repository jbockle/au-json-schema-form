"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bootstrap_validation_renderer_1 = require("./renderers/bootstrap-validation-renderer");
var schema_form_configuration_1 = require("./services/schema-form-configuration");
var aurelia_framework_1 = require("aurelia-framework");
var aurelia_logging_1 = require("aurelia-logging");
var logger_1 = require("./resources/logger");
var au_json_schema_form_1 = require("./form/au-json-schema-form");
exports.AuJsonSchemaForm = au_json_schema_form_1.AuJsonSchemaForm;
var index_1 = require("./templates/bootstrap4/index");
exports.GetBootstrapTemplates = index_1.GetBootstrapTemplates;
function configure(frameworkConfig, options) {
    if (options === void 0) { options = {}; }
    var logger = aurelia_logging_1.getLogger("au-json-schema-form");
    registerLogger(logger, options, frameworkConfig);
    registerConfiguration(logger, options, frameworkConfig);
    frameworkConfig.globalResources([
        aurelia_framework_1.PLATFORM.moduleName("./form/au-json-schema-form"),
        aurelia_framework_1.PLATFORM.moduleName("./value-converters/number-value-converter"),
        aurelia_framework_1.PLATFORM.moduleName("./form/number/sf-number"),
        aurelia_framework_1.PLATFORM.moduleName("./form/text/sf-text")
    ]);
}
exports.configure = configure;
function registerLogger(logger, options, frameworkConfig) {
    logger.setLevel(options.logLevel || aurelia_framework_1.LogManager.logLevel.none);
    frameworkConfig.container.registerInstance(logger_1.SchemaFormLogger, logger);
    logger.info("registered logger");
}
function registerConfiguration(logger, options, frameworkConfig) {
    var configuration = new schema_form_configuration_1.SchemaFormConfiguration(options.validationRenderer || new bootstrap_validation_renderer_1.BootstrapValidationRenderer(), options.templates || index_1.GetBootstrapTemplates(frameworkConfig), frameworkConfig);
    frameworkConfig.container.registerInstance(schema_form_configuration_1.SchemaFormConfiguration, configuration);
    logger.info("registered configuration", configuration);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJGQUF3RjtBQUN4RixrRkFBK0U7QUFDL0UsdURBQWlGO0FBRWpGLG1EQUE0QztBQUM1Qyw2Q0FBc0Q7QUFFdEQsa0VBQThEO0FBOERyRCwyQkE5REEsc0NBQWdCLENBOERBO0FBN0R6QixzREFBcUU7QUE2RDFDLGdDQTdEbEIsNkJBQXFCLENBNkRrQjtBQTFDaEQsbUJBQ0UsZUFBdUMsRUFDdkMsT0FBc0M7SUFBdEMsd0JBQUEsRUFBQSxZQUFzQztJQUV0QyxJQUFNLE1BQU0sR0FBRywyQkFBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDaEQsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDakQscUJBQXFCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV4RCxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQzlCLDRCQUFRLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDO1FBQ2pELDRCQUFRLENBQUMsVUFBVSxDQUFDLDJDQUEyQyxDQUFDO1FBRWhFLDRCQUFRLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDO1FBQzlDLDRCQUFRLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDO0tBQzNDLENBQUMsQ0FBQztBQUVMLENBQUM7QUEwQjJFLDhCQUFTO0FBeEJyRix3QkFDRSxNQUF3QixFQUN4QixPQUFpQyxFQUNqQyxlQUF1QztJQUV2QyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksOEJBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyRSxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELCtCQUNFLE1BQXdCLEVBQ3hCLE9BQWlDLEVBQ2pDLGVBQXVDO0lBRXZDLElBQU0sYUFBYSxHQUFHLElBQUksbURBQXVCLENBQy9DLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLDJEQUEyQixFQUFFLEVBQy9ELE9BQU8sQ0FBQyxTQUFTLElBQUksNkJBQXFCLENBQUMsZUFBZSxDQUFDLEVBQzNELGVBQWUsQ0FDaEIsQ0FBQztJQUNGLGVBQWUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsbURBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbkYsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwiZmlsZSI6ImF1cmVsaWEtanNvbi1zY2hlbWEtZm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb3RzdHJhcFZhbGlkYXRpb25SZW5kZXJlciB9IGZyb20gXCIuL3JlbmRlcmVycy9ib290c3RyYXAtdmFsaWRhdGlvbi1yZW5kZXJlclwiO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi9zZXJ2aWNlcy9zY2hlbWEtZm9ybS1jb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBGcmFtZXdvcmtDb25maWd1cmF0aW9uLCBQTEFURk9STSwgTG9nTWFuYWdlciB9IGZyb20gXCJhdXJlbGlhLWZyYW1ld29ya1wiO1xuaW1wb3J0IHsgVmFsaWRhdGlvblJlbmRlcmVyIH0gZnJvbSBcImF1cmVsaWEtdmFsaWRhdGlvblwiO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSBcImF1cmVsaWEtbG9nZ2luZ1wiO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUxvZ2dlciB9IGZyb20gXCIuL3Jlc291cmNlcy9sb2dnZXJcIjtcbmltcG9ydCB7IElUZW1wbGF0ZXMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3RlbXBsYXRlc1wiO1xuaW1wb3J0IHsgQXVKc29uU2NoZW1hRm9ybSB9IGZyb20gXCIuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybVwiO1xuaW1wb3J0IHsgR2V0Qm9vdHN0cmFwVGVtcGxhdGVzIH0gZnJvbSBcIi4vdGVtcGxhdGVzL2Jvb3RzdHJhcDQvaW5kZXhcIjtcblxuaW50ZXJmYWNlIElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkgdGhlIHJlbmRlcmVyIHRvIGRpc3BsYXkgZXJyb3IsIHN1Y2Nlc3MgYW5kIG1vcmUgb24gZm9ybSBlbGVtZW50c1xuICAgKi9cbiAgdmFsaWRhdGlvblJlbmRlcmVyPzogVmFsaWRhdGlvblJlbmRlcmVyO1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgdGhlIGxpc3Qgb2YgZGVwZW5kZW5jaWVzIHVzZWQgdG8gZ2VuZXJhdGUgZm9ybSBlbGVtZW50c1xuICAgKi9cbiAgdGVtcGxhdGVzPzogSVRlbXBsYXRlcztcblxuICAvKipcbiAgICogQHByb3BlcnR5IHNldHMgdGhlIGxvZyBsZXZlbCwgZGVmYXVsdCBpcyBub25lXG4gICAqL1xuICBsb2dMZXZlbD86IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gY29uZmlndXJlKFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb24sXG4gIG9wdGlvbnM6IElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiA9IHt9XG4pIHtcbiAgY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKFwiYXUtanNvbi1zY2hlbWEtZm9ybVwiKTtcbiAgcmVnaXN0ZXJMb2dnZXIobG9nZ2VyLCBvcHRpb25zLCBmcmFtZXdvcmtDb25maWcpO1xuICByZWdpc3RlckNvbmZpZ3VyYXRpb24obG9nZ2VyLCBvcHRpb25zLCBmcmFtZXdvcmtDb25maWcpO1xuXG4gIGZyYW1ld29ya0NvbmZpZy5nbG9iYWxSZXNvdXJjZXMoW1xuICAgIFBMQVRGT1JNLm1vZHVsZU5hbWUoXCIuL2Zvcm0vYXUtanNvbi1zY2hlbWEtZm9ybVwiKSxcbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKFwiLi92YWx1ZS1jb252ZXJ0ZXJzL251bWJlci12YWx1ZS1jb252ZXJ0ZXJcIiksXG5cbiAgICBQTEFURk9STS5tb2R1bGVOYW1lKFwiLi9mb3JtL251bWJlci9zZi1udW1iZXJcIiksXG4gICAgUExBVEZPUk0ubW9kdWxlTmFtZShcIi4vZm9ybS90ZXh0L3NmLXRleHRcIilcbiAgXSk7XG5cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJMb2dnZXIoXG4gIGxvZ2dlcjogU2NoZW1hRm9ybUxvZ2dlcixcbiAgb3B0aW9uczogSVNjaGVtYUZvcm1Db25maWd1cmF0aW9uLFxuICBmcmFtZXdvcmtDb25maWc6IEZyYW1ld29ya0NvbmZpZ3VyYXRpb25cbikge1xuICBsb2dnZXIuc2V0TGV2ZWwob3B0aW9ucy5sb2dMZXZlbCB8fCBMb2dNYW5hZ2VyLmxvZ0xldmVsLm5vbmUpO1xuICBmcmFtZXdvcmtDb25maWcuY29udGFpbmVyLnJlZ2lzdGVySW5zdGFuY2UoU2NoZW1hRm9ybUxvZ2dlciwgbG9nZ2VyKTtcbiAgbG9nZ2VyLmluZm8oXCJyZWdpc3RlcmVkIGxvZ2dlclwiKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJDb25maWd1cmF0aW9uKFxuICBsb2dnZXI6IFNjaGVtYUZvcm1Mb2dnZXIsXG4gIG9wdGlvbnM6IElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbixcbiAgZnJhbWV3b3JrQ29uZmlnOiBGcmFtZXdvcmtDb25maWd1cmF0aW9uXG4pIHtcbiAgY29uc3QgY29uZmlndXJhdGlvbiA9IG5ldyBTY2hlbWFGb3JtQ29uZmlndXJhdGlvbihcbiAgICBvcHRpb25zLnZhbGlkYXRpb25SZW5kZXJlciB8fCBuZXcgQm9vdHN0cmFwVmFsaWRhdGlvblJlbmRlcmVyKCksXG4gICAgb3B0aW9ucy50ZW1wbGF0ZXMgfHwgR2V0Qm9vdHN0cmFwVGVtcGxhdGVzKGZyYW1ld29ya0NvbmZpZyksXG4gICAgZnJhbWV3b3JrQ29uZmlnXG4gICk7XG4gIGZyYW1ld29ya0NvbmZpZy5jb250YWluZXIucmVnaXN0ZXJJbnN0YW5jZShTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiwgY29uZmlndXJhdGlvbik7XG4gIGxvZ2dlci5pbmZvKFwicmVnaXN0ZXJlZCBjb25maWd1cmF0aW9uXCIsIGNvbmZpZ3VyYXRpb24pO1xufVxuXG5leHBvcnQgeyBBdUpzb25TY2hlbWFGb3JtLCBHZXRCb290c3RyYXBUZW1wbGF0ZXMsIElTY2hlbWFGb3JtQ29uZmlndXJhdGlvbiwgY29uZmlndXJlIH07XG4iXSwic291cmNlUm9vdCI6InNyYyJ9
