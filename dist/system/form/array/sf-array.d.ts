import { InlineViewStrategy, View } from "aurelia-framework";
import { IJsonSchemaArrayDefinition } from "../../interfaces/json-schema-definition";
import { SchemaFormConfiguration } from "../../services/schema-form-configuration";
import { SchemaFormLogger } from "../../resources/logger";
import { IFormOverride } from "../../interfaces/form-override";
import { FormService } from "../../services/form-service";
import { Validator, ValidateResult, ValidationController } from "aurelia-validation";
import { ArrayRules } from "../../rules/array-rules";
export declare class SfArray {
    arrayRules: ArrayRules;
    configuration: SchemaFormConfiguration;
    formService: FormService;
    private logger;
    validator: Validator;
    form: IFormOverride;
    key: string;
    model: any[];
    schema: IJsonSchemaArrayDefinition;
    id: string;
    kind: string;
    view: InlineViewStrategy;
    viewStrategy: string;
    results: ValidateResult[];
    validationController: ValidationController;
    constructor(arrayRules: ArrayRules, configuration: SchemaFormConfiguration, formService: FormService, logger: SchemaFormLogger, validator: Validator);
    created(owningView: View, myView: View): void;
    bind(): void;
    determineViewStrategy(): void;
    private createView;
    private bindRules;
    getFormController(overrideContext: any): any;
    add(): void;
    remove(index: any): void;
    readonly isDisabled: boolean;
    readonly atCapacity: boolean;
    readonly atMinimumCapacity: boolean;
}
